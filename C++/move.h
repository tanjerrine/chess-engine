#ifndef MOVE_H
#define MOVE_H
#include "utils.h"
#include <string>
#include <vector>
#include <iostream>

typedef unsigned long long U64;

const U64 knight_attacks[64] = {
    132096UL, 329728UL, 659712UL, 1319424UL, 2638848UL, 5277696UL, 10489856UL, 4202496UL, 
    33816580UL, 84410376UL, 168886289UL, 337772578UL, 675545156UL, 1351090312UL, 2685403152UL, 1075839008UL, 
    8657044482UL, 21609056261UL, 43234889994UL, 86469779988UL, 172939559976UL, 345879119952UL, 687463207072UL, 275414786112UL, 
    2216203387392UL, 5531918402816UL, 11068131838464UL, 22136263676928UL, 44272527353856UL, 88545054707712UL, 175990581010432UL, 70506185244672UL, 
    567348067172352UL, 1416171111120896UL, 2833441750646784UL, 5666883501293568UL, 11333767002587136UL, 22667534005174272UL, 45053588738670592UL, 18049583422636032UL, 
    145241105196122112UL, 362539804446949376UL, 725361088165576704UL, 1450722176331153408UL, 2901444352662306816UL, 5802888705324613632UL, 11533718717099671552UL, 4620693356194824192UL, 
    288234782788157440UL, 576469569871282176UL, 1224997833292120064UL, 2449995666584240128UL, 4899991333168480256UL, 9799982666336960512UL, 1152939783987658752UL, 2305878468463689728UL, 
    1128098930098176UL, 2257297371824128UL, 4796069720358912UL, 9592139440717824UL, 19184278881435648UL, 38368557762871296UL, 4679521487814656UL, 9077567998918656UL
};

const U64 king_attacks[64] = {
    770UL, 1797UL, 3594UL, 7188UL, 14376UL, 28752UL, 57504UL, 49216UL, 
    197123UL, 460039UL, 920078UL, 1840156UL, 3680312UL, 7360624UL, 14721248UL, 12599488UL, 
    50463488UL, 117769984UL, 235539968UL, 471079936UL, 942159872UL, 1884319744UL, 3768639488UL, 3225468928UL, 
    12918652928UL, 30149115904UL, 60298231808UL, 120596463616UL, 241192927232UL, 482385854464UL, 964771708928UL, 825720045568UL, 
    3307175149568UL, 7718173671424UL, 15436347342848UL, 30872694685696UL, 61745389371392UL, 123490778742784UL, 246981557485568UL, 211384331665408UL, 
    846636838289408UL, 1975852459884544UL, 3951704919769088UL, 7903409839538176UL, 15806819679076352UL, 31613639358152704UL, 63227278716305408UL, 54114388906344448UL, 
    216739030602088448UL, 505818229730443264UL, 1011636459460886528UL, 2023272918921773056UL, 4046545837843546112UL, 8093091675687092224UL, 16186183351374184448UL, 13853283560024178688UL, 
    144959613005987840UL, 362258295026614272UL, 724516590053228544UL, 1449033180106457088UL, 2898066360212914176UL, 5796132720425828352UL, 11592265440851656704UL, 4665729213955833856UL
};

const U8 rook_first_rank_attacks[64][8] = {
    {0xfe, 0xfd, 0xfb, 0xf7, 0xef, 0xdf, 0xbf, 0x7f}, {0x2, 0xfd, 0xfa, 0xf6, 0xee, 0xde, 0xbe, 0x7e}, {0x6, 0x5, 0xfb, 0xf4, 0xec, 0xdc, 0xbc, 0x7c}, {0x2, 0x5, 0xfa, 0xf4, 0xec, 0xdc, 0xbc, 0x7c}, 
    {0xe, 0xd, 0xb, 0xf7, 0xe8, 0xd8, 0xb8, 0x78}, {0x2, 0xd, 0xa, 0xf6, 0xe8, 0xd8, 0xb8, 0x78}, {0x6, 0x5, 0xb, 0xf4, 0xe8, 0xd8, 0xb8, 0x78}, {0x2, 0x5, 0xa, 0xf4, 0xe8, 0xd8, 0xb8, 0x78}, 
    {0x1e, 0x1d, 0x1b, 0x17, 0xef, 0xd0, 0xb0, 0x70}, {0x2, 0x1d, 0x1a, 0x16, 0xee, 0xd0, 0xb0, 0x70}, {0x6, 0x5, 0x1b, 0x14, 0xec, 0xd0, 0xb0, 0x70}, {0x2, 0x5, 0x1a, 0x14, 0xec, 0xd0, 0xb0, 0x70}, 
    {0xe, 0xd, 0xb, 0x17, 0xe8, 0xd0, 0xb0, 0x70}, {0x2, 0xd, 0xa, 0x16, 0xe8, 0xd0, 0xb0, 0x70}, {0x6, 0x5, 0xb, 0x14, 0xe8, 0xd0, 0xb0, 0x70}, {0x2, 0x5, 0xa, 0x14, 0xe8, 0xd0, 0xb0, 0x70}, 
    {0x3e, 0x3d, 0x3b, 0x37, 0x2f, 0xdf, 0xa0, 0x60}, {0x2, 0x3d, 0x3a, 0x36, 0x2e, 0xde, 0xa0, 0x60}, {0x6, 0x5, 0x3b, 0x34, 0x2c, 0xdc, 0xa0, 0x60}, {0x2, 0x5, 0x3a, 0x34, 0x2c, 0xdc, 0xa0, 0x60}, 
    {0xe, 0xd, 0xb, 0x37, 0x28, 0xd8, 0xa0, 0x60}, {0x2, 0xd, 0xa, 0x36, 0x28, 0xd8, 0xa0, 0x60}, {0x6, 0x5, 0xb, 0x34, 0x28, 0xd8, 0xa0, 0x60}, {0x2, 0x5, 0xa, 0x34, 0x28, 0xd8, 0xa0, 0x60}, 
    {0x1e, 0x1d, 0x1b, 0x17, 0x2f, 0xd0, 0xa0, 0x60}, {0x2, 0x1d, 0x1a, 0x16, 0x2e, 0xd0, 0xa0, 0x60}, {0x6, 0x5, 0x1b, 0x14, 0x2c, 0xd0, 0xa0, 0x60}, {0x2, 0x5, 0x1a, 0x14, 0x2c, 0xd0, 0xa0, 0x60}, 
    {0xe, 0xd, 0xb, 0x17, 0x28, 0xd0, 0xa0, 0x60}, {0x2, 0xd, 0xa, 0x16, 0x28, 0xd0, 0xa0, 0x60}, {0x6, 0x5, 0xb, 0x14, 0x28, 0xd0, 0xa0, 0x60}, {0x2, 0x5, 0xa, 0x14, 0x28, 0xd0, 0xa0, 0x60}, 
    {0x7e, 0x7d, 0x7b, 0x77, 0x6f, 0x5f, 0xbf, 0x40}, {0x2, 0x7d, 0x7a, 0x76, 0x6e, 0x5e, 0xbe, 0x40}, {0x6, 0x5, 0x7b, 0x74, 0x6c, 0x5c, 0xbc, 0x40}, {0x2, 0x5, 0x7a, 0x74, 0x6c, 0x5c, 0xbc, 0x40}, 
    {0xe, 0xd, 0xb, 0x77, 0x68, 0x58, 0xb8, 0x40}, {0x2, 0xd, 0xa, 0x76, 0x68, 0x58, 0xb8, 0x40}, {0x6, 0x5, 0xb, 0x74, 0x68, 0x58, 0xb8, 0x40}, {0x2, 0x5, 0xa, 0x74, 0x68, 0x58, 0xb8, 0x40}, 
    {0x1e, 0x1d, 0x1b, 0x17, 0x6f, 0x50, 0xb0, 0x40}, {0x2, 0x1d, 0x1a, 0x16, 0x6e, 0x50, 0xb0, 0x40}, {0x6, 0x5, 0x1b, 0x14, 0x6c, 0x50, 0xb0, 0x40}, {0x2, 0x5, 0x1a, 0x14, 0x6c, 0x50, 0xb0, 0x40}, 
    {0xe, 0xd, 0xb, 0x17, 0x68, 0x50, 0xb0, 0x40}, {0x2, 0xd, 0xa, 0x16, 0x68, 0x50, 0xb0, 0x40}, {0x6, 0x5, 0xb, 0x14, 0x68, 0x50, 0xb0, 0x40}, {0x2, 0x5, 0xa, 0x14, 0x68, 0x50, 0xb0, 0x40}, 
    {0x3e, 0x3d, 0x3b, 0x37, 0x2f, 0x5f, 0xa0, 0x40}, {0x2, 0x3d, 0x3a, 0x36, 0x2e, 0x5e, 0xa0, 0x40}, {0x6, 0x5, 0x3b, 0x34, 0x2c, 0x5c, 0xa0, 0x40}, {0x2, 0x5, 0x3a, 0x34, 0x2c, 0x5c, 0xa0, 0x40}, 
    {0xe, 0xd, 0xb, 0x37, 0x28, 0x58, 0xa0, 0x40}, {0x2, 0xd, 0xa, 0x36, 0x28, 0x58, 0xa0, 0x40}, {0x6, 0x5, 0xb, 0x34, 0x28, 0x58, 0xa0, 0x40}, {0x2, 0x5, 0xa, 0x34, 0x28, 0x58, 0xa0, 0x40}, 
    {0x1e, 0x1d, 0x1b, 0x17, 0x2f, 0x50, 0xa0, 0x40}, {0x2, 0x1d, 0x1a, 0x16, 0x2e, 0x50, 0xa0, 0x40}, {0x6, 0x5, 0x1b, 0x14, 0x2c, 0x50, 0xa0, 0x40}, {0x2, 0x5, 0x1a, 0x14, 0x2c, 0x50, 0xa0, 0x40}, 
    {0xe, 0xd, 0xb, 0x17, 0x28, 0x50, 0xa0, 0x40}, {0x2, 0xd, 0xa, 0x16, 0x28, 0x50, 0xa0, 0x40}, {0x6, 0x5, 0xb, 0x14, 0x28, 0x50, 0xa0, 0x40}, {0x2, 0x5, 0xa, 0x14, 0x28, 0x50, 0xa0, 0x40}
};

class Move {
    public:
        Move(int piece, U64 start, U64 finish, bool capture = false, bool en_passant = false, int promote = -1);
        std::string get_notation() const;
        inline int get_piece() const {return piece;}
        inline U64 get_start() const {return start;}
        inline U64 get_finish() const {return finish;}
        inline bool get_capture() const {return capture;}
        inline bool get_en_passant() const {return en_passant;}
        inline int get_promote() const {return promote;}

    private:
        int piece;
        U64 start;
        U64 finish;
        bool capture;
        bool en_passant;
        int promote;
};

inline U64 w_pawn_east_atks(U64 w_pawns) {return ne_one(w_pawns);}
inline U64 w_pawn_west_atks(U64 w_pawns) {return nw_one(w_pawns);}
inline U64 b_pawn_east_atks(U64 b_pawns) {return se_one(b_pawns);}
inline U64 b_pawn_west_atks(U64 b_pawns) {return sw_one(b_pawns);}
inline U64 w_pawn_atks(U64 w_pawns) {return w_pawn_east_atks(w_pawns) | w_pawn_west_atks(w_pawns);}
inline U64 b_pawn_atks(U64 b_pawns) {return b_pawn_east_atks(b_pawns) | b_pawn_west_atks(b_pawns);}

class Board;
#include "board.h"

std::vector<Move> pawns_legal_moves(U64 pawn_poss, Board* board);
std::vector<Move> king_knights_legal_moves(U64 pawn_poss, Board* board, int piece);

U64 line_atks(U64 occ, U64 slider);
U64 get_rook_hor_atks(U64 occ, U64 slider);
U64 get_rook_vert_atks(U64 occ, U64 slider);
U64 get_rook_atks(U64 occ, U64 slider);
std::vector<Move> sliders_legal_moves(U64 piece_bb, Board* board, int piece);
U64 diag_atks(U64 occ, U64 slider, bool anti);
U64 get_bishop_atks(U64 occ, U64 slider);
inline U64 get_queen_atks(U64 occ, U64 slider) {return get_rook_atks(occ, slider) | get_bishop_atks(occ, slider);}
U64 attacks_to_sq(U64 (&piece_bb)[6], U64 occ_bb, U64 sq, enum_color king_color);

inline void print_moves(std::vector<Move> moves) {
    int num = moves.size();
    std::cout << "Printing all " << num << " moves: ";
    for (int i = 0; i < num; i++) {
        std::cout << moves[i].get_notation();
        if (i != num - 1) std::cout << ", ";
    }
    std::cout << std::endl;
}

#endif
